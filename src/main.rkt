#lang racket

(require "fulmar-core.rkt")
(require "core-chunk.rkt")
(require "standard-chunk.rkt")
(require "writer.rkt")
(require "io.rkt")
(require "version.rkt")
(require "license.rkt")

; main for fulmar

(define cmdln-line-length (make-parameter 80))
(define cmdln-input-location (make-parameter #false))
(define cmdln-output-location (make-parameter #false))
(define cmdln-path (make-parameter #false))
(define cmdln-license-file (make-parameter #true))
(define cmdln-header (make-parameter #true))

;TODO: add checks to line length argument in case string is not a number (currently converts any input string into integer silently)
(define (string->integer str)
  (foldl (λ (i t) (+ (* t 10) i))
         0
         (map (λ (c) (- (char->integer c)
                        (char->integer #\0)))
              (string->list str))))

(define (convert-file-to-guard given-path)
  (define (add-underscores file-name)
    (foldr (λ (char lst) (cond [(char-upper-case? char) (cons #\_ (cons char lst))]
                               [(eq? #\. char) (cons #\_ lst)]
                               [else (cons char lst)]))
           null
           file-name))
  (string-upcase (list->string (rest (add-underscores (string->list (some-system-path->string (file-name-from-path given-path))))))))

(command-line #:program "fulmar"
              #:once-each
              [("-i" "--in") input
                             "Specify input file"
                             (cmdln-input-location input)]
              [("-o" "--out") output
                              "Specify output file"
                              (cmdln-output-location output)]
              [("-l" "--line-length") length
                                      "Specify the length of a line (soft limit)"
                                      (cmdln-line-length (string->integer length))]
              [("-p" "--path") path
                               "Specify path for included files - currently limited to one directory"
                               (cmdln-path path)]
              #:once-any
              [("--license") license-file
                             ("Specify file to use for license of generated file"
                              "Not compatible with --no-license flag"
                              "Defaults to MIT license")
                             (cmdln-license-file license-file)]
              [("-n" "--no-license") ("Specify that no license is to be used for generated file"
                                      "Not compatible with --license flag")
                                     (cmdln-license-file #false)]
              #:once-any
              [("-g" "--header") guard
                                 ("Specify that file is a header and uses given guard as its include guard"
                                  "Not compatible with --source flag"
                                  "Defaults to a guard generated from the header file's name (or generated symbol, if no name is given)")
                                 (cmdln-header guard)]
              [("-s" "--source") ("Specify that output is a source file and does not need an include guard"
                                  "Not compatible with --header flag")
                                 (cmdln-header #false)]
              #:args non-flag-args (if (or (and (<= 1 (length non-flag-args))
                                                (cmdln-input-location))
                                           (and (<= 2 (length non-flag-args))
                                                (cmdln-output-location)))
                                       (error "Malformed input. Use -h or --help for more information.")
                                       (let* ([source (cond [(cmdln-input-location)]
                                                            [(< 0 (length non-flag-args)) (first non-flag-args)]
                                                            [else (current-input-port)])]
                                              [destination (cond [(cmdln-output-location)]
                                                                 [(< 1 (length non-flag-args)) (second non-flag-args)]
                                                                 [else (current-output-port)])]
                                              [version-chunk (comment-env-chunk (concat-chunk "This file was generated by fulmar version "
                                                                                              version-number
                                                                                              "."))]
                                              [license (cond [(eq? #true (cmdln-license-file)) standard-license]
                                                             [(cmdln-license-file) (copy-file! (cmdln-license-file))]
                                                             [else null])]
                                              [guard (cond [(eq? #true (cmdln-header))
                                                            (cond [(cmdln-output-location)
                                                                   (convert-file-to-guard (cmdln-output-location))]
                                                                  [else 'FULMAR_DEFAULT_INCLUDE_GUARD])]
                                                           [(cmdln-header)]
                                                           [else #false])]
                                              [header (if guard
                                                          (λ chunks (pp-header-file-chunk guard chunks))
                                                          (λ chunks chunks))]
                                              [context (construct-context (cmdln-line-length))]
                                              [path (cond [(cmdln-path)]
                                                          [else (current-directory)])])
                                         (print-code! (write-nekot (transform-chunks (list version-chunk
                                                                                           license
                                                                                           (header (read-eval-chunks! source
                                                                                                                      path)))
                                                                                     context))
                                                      destination))))
